pipeline {
    agent any
	
    stages {
		stage('Clean up existing data') {
			steps {
				dir('kubernetes-init/data') {
					sh 'rm -rf *'
					//echo "current build number: ${currentBuild.number}"
				}
			}
		}
		stage('Pull Jmeter Image from registery') {
			steps {
			    sh 'docker pull shcode/jmeter'
			}
		}
        stage('Get latest Build from repository') {
            steps {
                echo 'Pulling latest script from GIT'
                git credentialsId: '97d5d908-16c5-43c5-9997-0f77d1237454', url: 'https://github.com/sh-tiket/kubernetes-jmeter.git'
            }
        }
        stage('Build Kubernetese Config') {
            steps {
                // change script.jmx with option from jenkins
                sh 'mkdir -p `pwd`/kubernetes-init/data/;cp `pwd`/data/script.jmx `pwd`/kubernetes-init/data/script.jmx;'
                sh 'cd `pwd`/kubernetes-init/;chmod 775 create.sh;./create.sh 2 script.jmx'
                sg 'kubectl -n jenkins create configmap jmeter-script --from-file=`pwd`/kubernetes-init/data/script.jmx'
                echo 'kubernetes configuration for Jmeter Masters and Slaves created successfully'
                //echo "current build number: ${currentBuild.number}"
            }
        }
       stage('Deploying Jmeter Slave Pods') {
            steps {
                withKubeCredentials(kubectlCredentials: [[credentialsId: 'kubernetes-perf-infra', namespace: 'jenkins', serverUrl: 'https://34.87.150.175']]) {
                   	echo 'Starting Execution'
                   	sh 'kubectl -n jenkins get pods'
    				sh 'cd `pwd`/kubernetes-init/config/; ls; i=1;while [ "$i" -le 2 ]; do kubectl apply -f slave$i.yaml; i=$(( i + 1 )); done'
    				sh 'sleep 60;'
                    echo 'Started Jmeter Slave Pods'
                }
            }
        }
		stage('Deploying JMeter Master and Start Test') {
            steps {
                withKubeCredentials(kubectlCredentials: [[credentialsId: 'kubernetes-perf-infra', namespace: 'jenkins', serverUrl: 'https://34.87.150.175']]) {
                   	echo 'Starting Execution'
                   	sh 'kubectl -n jenkins get pods'
                    sh 'cd `pwd`/kubernetes-init/config/; kubectl apply -f master.yaml'
                    sh 'sleep 60;'
        			sh 'kubectl logs master -f'
                }
            }
        }
        stage('Stopping Jmeter Pods') {
            steps {
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'gke_tk-perf_asia-southeast1_tk-perf-infra-cluster', contextName: 'gke_tk-perf_asia-southeast1_tk-perf-infra-cluster', credentialsId: 'kubernetes-perf-infra', namespace: 'jenkins', serverUrl: 'https://34.87.150.175']]) {
                    sh 'cd `pwd`/kubernetes-init/config/; ls; kubectl delete -f .;'
                    echo 'Deleting Pods for master & slave'
                }
            }
        }
		stage('Archive data') {
			steps {
				dir('kubernetes-init/data') {
					archiveArtifacts artifacts: '**'
				}
			}
		}
    }
}